syntax = "proto3";

package CheckerSystem;

option go_package = "deployer/pkg/proto";

// Service definition for orchestrating services
service CheckerSystem {

  // Create a new service from a folder of files
  rpc CreateChecker (RegisterCheckerRequest) returns (RegisterCheckerResponse);

  // Check the status of a service by its ID
  rpc PingChecker (PingCheckerRequest) returns (PingCheckerResponse);

  rpc CreateVulnService (CreateVulnServiceRequest) returns (CreateVulnServiceResponse);

  // Stop a service by its ID
  rpc StopVulnServices (StopVulnServicesRequest) returns (StopVulnServicesResponse);

  rpc PingVulnService (PingVulnServiceRequest) returns (VulnServiceInfo);




}

// Request to create a new service
message RegisterCheckerRequest {
  string code_archive = 1;
}

// Response after creating a service
message RegisterCheckerResponse {
  string id = 1; // UUID of the created service
}

// Request to check the status of a service
message PingCheckerRequest {
  string id = 1; // UUID of the service
}

// Response for the Ping endpoint
message PingCheckerResponse {
  string message = 1; // Status message or additional information
  repeated VulnServiceInfo instances = 2;
}

message VulnServiceInfo {
  int32 status_code = 1; // Status code of the operation
  string message = 2; // Status message or additional information
  int32 web_port = 3;
  string ip = 4;
  string instance_id = 5; // UUID of the instance
  int32 last_check = 6; // Timestamp of the last check
}

message PingVulnServiceRequest { // response is VulnServiceInfo ^
  string instance_id = 1; // UUID of the instance
}


message CreateVulnServiceRequest {
  string service_id = 1;
  string ip = 2;
  int32 web_port = 3;
}

message CreateVulnServiceResponse {
  string instance_id = 1;
  bool success = 2;
}

message StopVulnServicesRequest {
  repeated string instance_ids = 1;
}

message StopVulnServicesResponse {
  bool success = 1;
}
