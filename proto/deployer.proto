syntax = "proto3";

package deployer;

option go_package = "deployer/pkg/proto";

// Service definition for orchestrating services
service ServiceDeployer {

  // Create a new service from a folder of files
  rpc CreateService (RegisterServiceRequest) returns (RegisterServiceResponse);

  // Check the status of a service by its ID
  rpc PingService (PingServiceRequest) returns (PingServiceResponse);

  rpc PingInstance (PingInstanceRequest) returns (InstanceInfo);

  // Start a service by its ID
  rpc StartInstances (StartInstancesRequest) returns (StartInstancesResponse);

  // Stop a service by its ID
  rpc StopInstances (StopInstancesRequest) returns (StopInstancesResponse);
}

// Request to create a new service
message RegisterServiceRequest {
  string code_archive = 1;
}

// Response after creating a service
message RegisterServiceResponse {
  string id = 1; // UUID of the created service
}

// Request to check the status of a service
message PingServiceRequest {
  string id = 1; // UUID of the service
}

// Response for the Ping endpoint
message PingServiceResponse {
  string message = 1; // Status message or additional information
  repeated InstanceInfo instances = 2;
}

message PingInstanceRequest {
  string instance_id = 1; // UUID of the instance
}

message InstanceInfo {
  int32 status_code = 1; // Status code of the operation
  string message = 2; // Status message or additional information
  int32 ssh_port = 3;
  int32 web_port = 4;
  string ip = 5;
  string instance_id = 6; // UUID of the instance
}

message StartInstancesRequest {
  int32 count = 1;
  string service_id = 2;
}

message StartInstancesResponse {
  repeated string instance_ids = 1; // Additional message or error description
  bool success = 2;
}

message StopInstancesRequest {
  repeated string instance_ids = 1;
}

message StopInstancesResponse {
  bool success = 1;
}
