// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: checker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceDeployer_CreateService_FullMethodName  = "/deployer.ServiceDeployer/CreateService"
	ServiceDeployer_PingService_FullMethodName    = "/deployer.ServiceDeployer/PingService"
	ServiceDeployer_PingInstance_FullMethodName   = "/deployer.ServiceDeployer/PingInstance"
	ServiceDeployer_StopInstances_FullMethodName  = "/deployer.ServiceDeployer/StopInstances"
	ServiceDeployer_CreateInstance_FullMethodName = "/deployer.ServiceDeployer/CreateInstance"
)

// ServiceDeployerClient is the client API for ServiceDeployer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for orchestrating services
type ServiceDeployerClient interface {
	// Create a new service from a folder of files
	CreateService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	// Check the status of a service by its ID
	PingService(ctx context.Context, in *PingServiceRequest, opts ...grpc.CallOption) (*PingServiceResponse, error)
	PingInstance(ctx context.Context, in *PingInstanceRequest, opts ...grpc.CallOption) (*InstanceInfo, error)
	// Stop a service by its ID
	StopInstances(ctx context.Context, in *StopInstancesRequest, opts ...grpc.CallOption) (*StopInstancesResponse, error)
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
}

type serviceDeployerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDeployerClient(cc grpc.ClientConnInterface) ServiceDeployerClient {
	return &serviceDeployerClient{cc}
}

func (c *serviceDeployerClient) CreateService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterServiceResponse)
	err := c.cc.Invoke(ctx, ServiceDeployer_CreateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDeployerClient) PingService(ctx context.Context, in *PingServiceRequest, opts ...grpc.CallOption) (*PingServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingServiceResponse)
	err := c.cc.Invoke(ctx, ServiceDeployer_PingService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDeployerClient) PingInstance(ctx context.Context, in *PingInstanceRequest, opts ...grpc.CallOption) (*InstanceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceInfo)
	err := c.cc.Invoke(ctx, ServiceDeployer_PingInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDeployerClient) StopInstances(ctx context.Context, in *StopInstancesRequest, opts ...grpc.CallOption) (*StopInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopInstancesResponse)
	err := c.cc.Invoke(ctx, ServiceDeployer_StopInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDeployerClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, ServiceDeployer_CreateInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDeployerServer is the server API for ServiceDeployer service.
// All implementations must embed UnimplementedServiceDeployerServer
// for forward compatibility.
//
// Service definition for orchestrating services
type ServiceDeployerServer interface {
	// Create a new service from a folder of files
	CreateService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	// Check the status of a service by its ID
	PingService(context.Context, *PingServiceRequest) (*PingServiceResponse, error)
	PingInstance(context.Context, *PingInstanceRequest) (*InstanceInfo, error)
	// Stop a service by its ID
	StopInstances(context.Context, *StopInstancesRequest) (*StopInstancesResponse, error)
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	mustEmbedUnimplementedServiceDeployerServer()
}

// UnimplementedServiceDeployerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceDeployerServer struct{}

func (UnimplementedServiceDeployerServer) CreateService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedServiceDeployerServer) PingService(context.Context, *PingServiceRequest) (*PingServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingService not implemented")
}
func (UnimplementedServiceDeployerServer) PingInstance(context.Context, *PingInstanceRequest) (*InstanceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingInstance not implemented")
}
func (UnimplementedServiceDeployerServer) StopInstances(context.Context, *StopInstancesRequest) (*StopInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInstances not implemented")
}
func (UnimplementedServiceDeployerServer) CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedServiceDeployerServer) mustEmbedUnimplementedServiceDeployerServer() {}
func (UnimplementedServiceDeployerServer) testEmbeddedByValue()                         {}

// UnsafeServiceDeployerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceDeployerServer will
// result in compilation errors.
type UnsafeServiceDeployerServer interface {
	mustEmbedUnimplementedServiceDeployerServer()
}

func RegisterServiceDeployerServer(s grpc.ServiceRegistrar, srv ServiceDeployerServer) {
	// If the following call pancis, it indicates UnimplementedServiceDeployerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceDeployer_ServiceDesc, srv)
}

func _ServiceDeployer_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDeployerServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDeployer_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDeployerServer).CreateService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDeployer_PingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDeployerServer).PingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDeployer_PingService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDeployerServer).PingService(ctx, req.(*PingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDeployer_PingInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDeployerServer).PingInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDeployer_PingInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDeployerServer).PingInstance(ctx, req.(*PingInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDeployer_StopInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDeployerServer).StopInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDeployer_StopInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDeployerServer).StopInstances(ctx, req.(*StopInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDeployer_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDeployerServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDeployer_CreateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDeployerServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceDeployer_ServiceDesc is the grpc.ServiceDesc for ServiceDeployer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceDeployer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deployer.ServiceDeployer",
	HandlerType: (*ServiceDeployerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _ServiceDeployer_CreateService_Handler,
		},
		{
			MethodName: "PingService",
			Handler:    _ServiceDeployer_PingService_Handler,
		},
		{
			MethodName: "PingInstance",
			Handler:    _ServiceDeployer_PingInstance_Handler,
		},
		{
			MethodName: "StopInstances",
			Handler:    _ServiceDeployer_StopInstances_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _ServiceDeployer_CreateInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checker.proto",
}
