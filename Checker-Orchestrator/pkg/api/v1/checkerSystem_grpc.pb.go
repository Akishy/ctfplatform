// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: checkerSystem.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CheckerSystem_RegisterChecker_FullMethodName   = "/CheckerSystem.CheckerSystem/RegisterChecker"
	CheckerSystem_PingChecker_FullMethodName       = "/CheckerSystem.CheckerSystem/PingChecker"
	CheckerSystem_CreateVulnService_FullMethodName = "/CheckerSystem.CheckerSystem/CreateVulnService"
	CheckerSystem_StopVulnServices_FullMethodName  = "/CheckerSystem.CheckerSystem/StopVulnServices"
	CheckerSystem_PingVulnService_FullMethodName   = "/CheckerSystem.CheckerSystem/PingVulnService"
)

// CheckerSystemClient is the client API for CheckerSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for orchestrating Checkers
type CheckerSystemClient interface {
	// Register a new (Checker-Orchestrator) from a folder of files
	RegisterChecker(ctx context.Context, in *RegisterCheckerRequest, opts ...grpc.CallOption) (*RegisterCheckerResponse, error)
	// Check the status of a Checker-Orchestrator by its ID
	PingChecker(ctx context.Context, in *PingCheckerRequest, opts ...grpc.CallOption) (*PingCheckerResponse, error)
	CreateVulnService(ctx context.Context, in *CreateVulnServiceRequest, opts ...grpc.CallOption) (*CreateVulnServiceResponse, error)
	// Stop a Checker-Orchestrator by its ID
	StopVulnServices(ctx context.Context, in *StopVulnServicesRequest, opts ...grpc.CallOption) (*StopVulnServicesResponse, error)
	PingVulnService(ctx context.Context, in *PingVulnServiceRequest, opts ...grpc.CallOption) (*VulnServiceInfo, error)
}

type checkerSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckerSystemClient(cc grpc.ClientConnInterface) CheckerSystemClient {
	return &checkerSystemClient{cc}
}

func (c *checkerSystemClient) RegisterChecker(ctx context.Context, in *RegisterCheckerRequest, opts ...grpc.CallOption) (*RegisterCheckerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterCheckerResponse)
	err := c.cc.Invoke(ctx, CheckerSystem_RegisterChecker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerSystemClient) PingChecker(ctx context.Context, in *PingCheckerRequest, opts ...grpc.CallOption) (*PingCheckerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingCheckerResponse)
	err := c.cc.Invoke(ctx, CheckerSystem_PingChecker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerSystemClient) CreateVulnService(ctx context.Context, in *CreateVulnServiceRequest, opts ...grpc.CallOption) (*CreateVulnServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVulnServiceResponse)
	err := c.cc.Invoke(ctx, CheckerSystem_CreateVulnService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerSystemClient) StopVulnServices(ctx context.Context, in *StopVulnServicesRequest, opts ...grpc.CallOption) (*StopVulnServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopVulnServicesResponse)
	err := c.cc.Invoke(ctx, CheckerSystem_StopVulnServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerSystemClient) PingVulnService(ctx context.Context, in *PingVulnServiceRequest, opts ...grpc.CallOption) (*VulnServiceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VulnServiceInfo)
	err := c.cc.Invoke(ctx, CheckerSystem_PingVulnService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckerSystemServer is the server API for CheckerSystem service.
// All implementations must embed UnimplementedCheckerSystemServer
// for forward compatibility.
//
// Service definition for orchestrating Checkers
type CheckerSystemServer interface {
	// Register a new (Checker-Orchestrator) from a folder of files
	RegisterChecker(context.Context, *RegisterCheckerRequest) (*RegisterCheckerResponse, error)
	// Check the status of a Checker-Orchestrator by its ID
	PingChecker(context.Context, *PingCheckerRequest) (*PingCheckerResponse, error)
	CreateVulnService(context.Context, *CreateVulnServiceRequest) (*CreateVulnServiceResponse, error)
	// Stop a Checker-Orchestrator by its ID
	StopVulnServices(context.Context, *StopVulnServicesRequest) (*StopVulnServicesResponse, error)
	PingVulnService(context.Context, *PingVulnServiceRequest) (*VulnServiceInfo, error)
	mustEmbedUnimplementedCheckerSystemServer()
}

// UnimplementedCheckerSystemServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCheckerSystemServer struct{}

func (UnimplementedCheckerSystemServer) RegisterChecker(context.Context, *RegisterCheckerRequest) (*RegisterCheckerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChecker not implemented")
}
func (UnimplementedCheckerSystemServer) PingChecker(context.Context, *PingCheckerRequest) (*PingCheckerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingChecker not implemented")
}
func (UnimplementedCheckerSystemServer) CreateVulnService(context.Context, *CreateVulnServiceRequest) (*CreateVulnServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVulnService not implemented")
}
func (UnimplementedCheckerSystemServer) StopVulnServices(context.Context, *StopVulnServicesRequest) (*StopVulnServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVulnServices not implemented")
}
func (UnimplementedCheckerSystemServer) PingVulnService(context.Context, *PingVulnServiceRequest) (*VulnServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingVulnService not implemented")
}
func (UnimplementedCheckerSystemServer) mustEmbedUnimplementedCheckerSystemServer() {}
func (UnimplementedCheckerSystemServer) testEmbeddedByValue()                       {}

// UnsafeCheckerSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckerSystemServer will
// result in compilation errors.
type UnsafeCheckerSystemServer interface {
	mustEmbedUnimplementedCheckerSystemServer()
}

func RegisterCheckerSystemServer(s grpc.ServiceRegistrar, srv CheckerSystemServer) {
	// If the following call pancis, it indicates UnimplementedCheckerSystemServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CheckerSystem_ServiceDesc, srv)
}

func _CheckerSystem_RegisterChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCheckerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerSystemServer).RegisterChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerSystem_RegisterChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerSystemServer).RegisterChecker(ctx, req.(*RegisterCheckerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerSystem_PingChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingCheckerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerSystemServer).PingChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerSystem_PingChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerSystemServer).PingChecker(ctx, req.(*PingCheckerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerSystem_CreateVulnService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVulnServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerSystemServer).CreateVulnService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerSystem_CreateVulnService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerSystemServer).CreateVulnService(ctx, req.(*CreateVulnServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerSystem_StopVulnServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVulnServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerSystemServer).StopVulnServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerSystem_StopVulnServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerSystemServer).StopVulnServices(ctx, req.(*StopVulnServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerSystem_PingVulnService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingVulnServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerSystemServer).PingVulnService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerSystem_PingVulnService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerSystemServer).PingVulnService(ctx, req.(*PingVulnServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckerSystem_ServiceDesc is the grpc.ServiceDesc for CheckerSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckerSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CheckerSystem.CheckerSystem",
	HandlerType: (*CheckerSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterChecker",
			Handler:    _CheckerSystem_RegisterChecker_Handler,
		},
		{
			MethodName: "PingChecker",
			Handler:    _CheckerSystem_PingChecker_Handler,
		},
		{
			MethodName: "CreateVulnService",
			Handler:    _CheckerSystem_CreateVulnService_Handler,
		},
		{
			MethodName: "StopVulnServices",
			Handler:    _CheckerSystem_StopVulnServices_Handler,
		},
		{
			MethodName: "PingVulnService",
			Handler:    _CheckerSystem_PingVulnService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkerSystem.proto",
}
